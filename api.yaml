openapi: 3.0.3
info:
  title: DRE-ip Server API
  version: 1.0.0
servers:
  - description: Backend Server
    url: Self-Hosted
  - description: localhost
    url: http://127.0.0.1:8000
security:
  - AuthToken: [ ]  # Require AuthToken by default.

tags:
  - name: Authentication
    description: Adds/removes admin/voter `auth_token` cookie.
  - name: Administrator
    description: Requires *__admin__* `auth_token` cookie.
  - name: Voter
    description: Requires *__voter__* `auth_token` cookie.
  - name: Public
    description: With *__admin__* `auth_token` cookie, includes non-finalised election data.

paths:
  /admins:
    post:
      summary: Create an administrator.
      tags:
        - Administrator
      requestBody:
        description: Administrator credentials.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCredentials'
      responses:
        201:
          description: Successfully created administrator.
        500:
          $ref: "#/components/responses/InternalServerError"
  /admins/authenticate:
    post:
      summary: Authenticate as an admin via valid credentials.
      security: [ ]  # No token needed before login.
      tags:
        - Authentication
      requestBody:
        description: Admin password.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCredentials"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        401:
          description: Incorrect credentials.
        500:
          $ref: "#/components/responses/InternalServerError"
  /elections:
    get:
      summary: Fetch elections
      tags:
        - Public
      responses:
        200:
          description: Successfully fetched elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Election"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create an election.
      tags:
        - Administrator
      requestBody:
        description:
          Initial election structure (optional).
          The ID field is ignored, as one will be allocated.
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Election"
      responses:
        201:
          description: Successfully created election.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /elections/{electionID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Fetch an election
      tags:
        - Public
      responses:
        200:
          description: Successfully fetched election.
          content:
            application.json:
              schema:
                $ref: "#/components/schemas/Election"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a non-finalised election.
      tags:
        - Administrator
      responses:
        200:
          description: Successfully deleted election.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /elections/{electionID}/{questionID}/ballots:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Fetch an election question's ballots.
      description:
        There may be a large number of ballots, so this request is paginated.
      parameters:
        - $ref: "#/components/parameters/PageNum"
        - $ref: "#/components/parameters/PageSize"
      security: [ ]  # No authentication needed.
      tags:
        - Public
      responses:
        200:
          description: Successfully fetched election question's ballots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ballots:
                    type: array
                    description: List of ballot receipts.
                    items:
                      $ref: "#/components/schemas/Stage2Receipt"
                  page_num:
                    type: integer
                    description: The actual page index retrieved.
                  page_size:
                    type: integer
                    description: The actual page size used.
                  total:
                    type: integer
                    description: The total number of ballots for this election.
              example:
                votes:
                  - id: 51
                    R: abcdef
                    Z: 098765
                    P: fedcba
                    action: "confirmed"
                  - id: 52
                    R: 123abc
                    Z: def456
                    P: 1a2b3c
                    action: "audited"
                    r: fafafa
                    v: 0
                page_num: 2
                page_size: 50
                total_votes: 52
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /elections/{electionID}/{questionID}/ballots/{voteID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
      - $ref: "#/components/parameters/BallotID"
    get:
      summary: Fetch an election question's ballot.
      security: [ ]  # No authentication needed.
      tags:
        - Public
      responses:
        200:
          description: Successfully fetched election question ballot.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2Receipt"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /elections/{electionID}/spec:
    put:
      summary: Respecify a non-finalised election's details.
      tags:
        - Administrator
      requestBody:
        description:
          New election specification.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Election"
      responses:
        200:
          description: Successfully modified election.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/challenge:
    get:
      summary: Request an SMS OTP challenge for voter authentication.
      description:
        Sets an encrypted JWT cookie claiming a randomly generated OTP and the given SMS number to which it is sent.
        The JWT and cookie expire simultaneously after a configurable duration.
      parameters:
        - in: query
          name: sms
          schema:
            type: string
            pattern: '^\+?[1-9]\d{1,14}$'
            example: "+441234567890"
      security: [ ]  # No token needed before login.
      tags:
        - Authentication
      responses:
        200:
          description: Successfully sent OTP.
          headers:
            Set-Cookie:
              description:
                Encrypted JWT claiming an SMS number and OTP.
                Cookie expires when JWT does.
              schema:
                $ref: "#/components/schemas/Challenge"
        400:
          $ref: "#/components/responses/BadRequest"
  /voter/verify:
    post:
      summary: Verify SMS OTP challenge to authenticate the voter.
      description:
        Saves a voter with the claimed SMS number if the submitted OTP matches the claimed OTP.
        Sets a voter `auth_token` that expires after a configurable duration.
      parameters:
        - in: cookie
          name: challenge
          schema:
            $ref: "#/components/schemas/Challenge"
      security: [ ]  # No token needed before login.
      tags:
        - Authentication
      requestBody:
        description: Submitted OTP.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
              required:
                - otp
              example:
                otp: "123456"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          description: Incorrect OTP.
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/groups:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Fetch the voter's groups for an election.
      description:
        Access is restricted to the voter because group membership may constitute personal information.
      tags:
        - Voter
      responses:
        200:
          description: Successfully fetched the voter's groups.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IDList"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/groups/join:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Add the voter to an election's groups.
      description:
        Can only be done once per voter per election.
        Fails if groups do not conform to their exclusion requirements.
      tags:
        - Voter
      requestBody:
        description: The election ID and a list of group IDs.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IDList"
      responses:
        200:
          description: Successfully added the user to groups.
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          description: Groups already set.
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/questions/confirmed:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Fetch election questions for which the voter has confirmed their candidate decision.
      tags:
        - Voter
      responses:
        200:
          description: Successfully fetched completed questions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IDList"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/votes/cast:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Submit provisional votes for stage-1 receipts.
      description:
        Register the voter's interest in voting for the given candidates on the given questions.
      tags:
        - Voter
      requestBody:
        description: "List of votes: question-candidate ID pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteList"
      responses:
        200:
          description: Successfully submitted provisional votes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage1ReceiptList"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/votes/audit:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Cancel provisional votes for stage-2 receipts.
      description:
        Allows the voter to audit the choices, ensuring it is Cast As Intended.
      tags:
        - Voter
      responses:
        200:
          description: Successfully cancelled provisional votes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2ReceiptList"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /voter/elections/{electionID}/votes/confirm:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Confirm provisional votes for stage-2 receipts.
      description:
        This confirms the provisional votes, locking in the voter's candidate decisions.
      tags:
        - Voter
      responses:
        200:
          description: Successfully confirmed provisional votes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2Receipt"
              example:
                id: 12345
                R: 329a7f6d7e8c5a5b
                Z: 8a6db9c9ee90f122
                P: 1298badfc7896fc7
                action: "confirmed"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"
  /auth:
    delete:
      summary: Remove proof of authentication.
      description: Removes the `auth_token` JWT cookie.
      security: [ ] # No token needed to logout
      tags:
        - Authentication
      responses:
        200:
          description: Logout successful, authentication token removed.

components:
  # Security
  securitySchemes:
    AuthToken:
      type: apiKey
      in: cookie
      name: auth_token
  # Payload Schemas
  schemas:
    ID:
      type: string
      example: 07b185d2-7f75-4409-ad47-9dc8bb95cb4d
    IDList:
      type: array
      items:
        $ref: "#/components/schemas/ID"
      minItems: 1
      uniqueItems: true
      example:
        - e041990c-5edc-4bdc-94ed-406a4b9759c3
        - 814d342b-acee-4848-b004-857ff77cf29f
        - ddf94a22-6d6f-4c73-9cba-00d1d83dd537
    AdminCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: "coordinator"
        password: "CorrectHorseBatteryStaple"
    Challenge:
      type: string
      example:  "PZdCgJeIc39mLMORSIVLNie9HotLcfbGaBKx6BEMrptxPfOlfbuxO5pa5Pd660aFtAILfv6aAmR2Y8Mgdt4uirqnFAMIYylLMsBP6CnAzak4K6Hm4iOcT4552Qhpbqh1WrekIOnFrTGVi08qv9XDeSjwluMgckxW6HlBZHIFL2Z4OMBODPo4uBHpe9Bt5pciM9rKaxIqmlCXwsLBm+yTExduCRqe7si39OTylgDWJt2dnBUL%2FRcZ; Path=/; HttpOnly; Expires=Fri, 10 Dec 2021 04:32:45 GMT;"
    AuthToken:
      type: string
      example: "auth_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOnsiJG9pZCI6IjYxYjJkZDNkYzEwODY3MzAyMjcwNjRhMCJ9LCJhZG0iOmZhbHNlLCJleHAiOjE2MzkxMTkxOTh9.bJqzVrH3ZFJuyKnoI9UAoYjqMsaQ51Fon43WUs5bGmQ; Path=/; HttpOnly;"
    Candidate:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
      required:
        - id
        - name
    Question:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        description:
          type: string
          example: Course Representative (Computer Science)
        groupConstraints:
          $ref: "#/components/schemas/IDList"
        candidates:
          type: array
          items:
            $ref: "#/components/schemas/Candidate"
      required:
        - id
        - description
        - groupConstraints
        - candidates
      example:
        id: 7b7c0917-060c-45cf-ace8-b8b834765d6f
        description: Course Representative (Computer Science)
        groupConstraints: [07b185d2-7f75-4409-ad47-9dc8bb95cb4d]
        candidates:
          - id: 398fc139-c26c-44ea-8af9-c09009091442
            name: Alice
          - id: cc75eb78-dd87-472b-b80c-4eeb55a69e2c
            name: Bob
    Group:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        name:
          type: string
          example: Computer Science Students
        mutexSet:
          type: string
          example: courses
      required:
        - id
        - name
      example:
        id: 07b185d2-7f75-4409-ad47-9dc8bb95cb4d
        name: Computer Science Students
        mutexSet: courses
    Election:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        finalised:
          type: boolean
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Group"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - name
        - finalised
        - startTime
        - endTime
        - groups
        - questions
      example:
        id: 7b1c5646-4cf8-4507-8ff4-bb8580214622
        name: SU Election
        finalised: true
        startTime: 2021-10-01T00:00:00Z
        endTime: 2021-10-08T00:00:00Z
        groups:
          - id: 07b185d2-7f75-4409-ad47-9dc8bb95cb4d
            name: Computer Science Students
        questions:
          - id: 7b7c0917-060c-45cf-ace8-b8b834765d6f
            desc: Course Representative (Computer Science)
            groupConstraints: [ 07b185d2-7f75-4409-ad47-9dc8bb95cb4d ]
            candidates:
              - id: 398fc139-c26c-44ea-8af9-c09009091442
                name: Alice
              - id: cc75eb78-dd87-472b-b80c-4eeb55a69e2c
                name: Bob
    Vote:
      type: object
      properties:
        question:
          type: string
        candidate:
          type: string
      required:
        - question
        - candidate
      example:
        question: 7b7c0917-060c-45cf-ace8-b8b834765d6f
        candidate: 398fc139-c26c-44ea-8af9-c09009091442
    VoteList:
      type: array
      items:
        $ref: "#/components/schemas/Vote"
      minItems: 1
      uniqueItems: true
      example:
        - question: 7b7c0917-060c-45cf-ace8-b8b834765d6f
          candidate: 398fc139-c26c-44ea-8af9-c09009091442
        - question: aa74a53e-e9b6-4f46-b73e-3ec41e583a1c
          candidate: 9a2ee202-6fb8-4fdb-89ec-c60a14999f7c
    Stage1Ballot:
      type: object
      properties:
        R:
          type: string
          description: Public random component.
        Z:
          type: string
          description: Public vote component.
        P:
          type: string  # TODO what is actual format of P?
          description: Public zero-knowledge proof component.
      required:
        - R
        - Z
        - P
      example:
        R: 329a7f6d7e8c5a5b
        Z: 8a6db9c9ee90f122
        P: 1298badfc7896fc7
    Stage2Ballot:
      type: object
      properties:
        R:
          type: string
          description: Public random component.
        Z:
          type: string
          description: Public vote component.
        P:
          type: string
          description: Public zero-knowledge proof component.
        action:
          type: string
          description: "Either 'confirmed' or 'audited'."
        r:
          type: string
          description: Secret random component; only present for audited votes.
        v:
          type: integer
          description: Secret vote component; only present for audited votes.
      required:
        - R
        - Z
        - P
        - action
      example:
        R: 329a7f6d7e8c5a5b
        Z: 8a6db9c9ee90f122
        P: 1298badfc7896fc7
        action: "audited"
        r: 1298cd98c28e90a0
        v: 1
    Stage1Receipt:
      type: object
      properties:
        id:
          type: integer
        ballots:
          type: array
          items:
            $ref: "#/components/schemas/Stage1Ballot"
      required:
        - id
        - ballots
      example:
        id: 12345
        ballots:
          - R: 329a7f6d7e8c5a5b
            Z: 8a6db9c9ee90f122
            P: 1298badfc7896fc7
    Stage2Receipt:
      description:
        A stage 2 receipt contains all the information of a stage 1 receipt, but additionally has been either confirmed or audited.
        An audited receipt will include the secrets `r` and `v` for verification purposes; a confirmed receipt will not.
      type: object
      properties:
        id:
          type: integer
        ballots:
          type: array
          items:
            $ref: "#/components/schemas/Stage2Ballot"
      required:
        - id
        - ballots
      example:
        id: 12345
        ballots:
          - R: 329a7f6d7e8c5a5b
            Z: 8a6db9c9ee90f122
            P: 1298badfc7896fc7
            action: "audited"
            r: 1298cd98c28e90a0
            v: 1
    Stage1ReceiptList:
      type: array
      items:
        $ref: '#/components/schemas/Stage1Receipt'
      minItems: 1
      uniqueItems: true
    Stage2ReceiptList:
      type: array
      items:
        $ref: '#/components/schemas/Stage2Receipt'
      minItems: 1
      uniqueItems: true
  # Common parameters
  parameters:
    ElectionID:
      name: electionID
      in: path
      required: true
      description: The ID of the election to operate on.
      schema:
        $ref: "#/components/schemas/ID"
    QuestionID:
      name: questionID
      in: path
      required: true
      description: The ID of the election question to operate on.
      schema:
        $ref: "#/components/schemas/ID"
    BallotID:
      name: ballotID
      in: path
      required: true
      description: The ID of the ballot to operate on.
      schema:
        type: integer
        example: 12345
    PageNum:
      name: page_num
      in: query
      description: The page index into paginated data, starting at 1.
      schema:
        type: integer
        default: 1
        example: 5
    PageSize:
      name: page_size
      in: query
      description:
        The requested size of a single paginated batch.
        The API may impose a maximum or minimum on this parameter.
      schema:
        type: integer
        default: 50
        maximum: 1000
        example: 100
  # Common Responses
  responses:
    AuthToken:
      description: Successfully authenticated.
      headers:
        Set-Cookie:
          schema:
            $ref: "#/components/schemas/AuthToken"
    BadRequest:
      description: Request was malformed.
    Unauthorized:
      description:
        "`auth_token` cookie is absent, formatted incorrectly or expired."
    Forbidden:
      description:
        "`auth_token` cookie does not grant the required permissions."
    NotFound:
      description: Requested resource was not found.
    InternalServerError:
      description: The server encountered an error.

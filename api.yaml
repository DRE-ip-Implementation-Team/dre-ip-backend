openapi: 3.0.3
info:
  title: DRE-ip Server API
  description:
    Assume any endpoint can return status 500 in the case of an unexpected error;
    particularly database errors.
    Listed 4xx errors cannot be assumed to be exhaustive either; the client must
    be able to handle any returned error code.
  version: 1.0.0
servers:
  - description: Backend Server
    url: Self-Hosted
security:
  - AuthToken: [ ]  # Require AuthToken by default.

tags:
  - name: Authentication Endpoints
    description: Adds/removes admin/voter `auth_token` cookie.
  - name: Administration Endpoints
    description: Admin user and election management. Requires *__admin__* `auth_token` cookie.
  - name: Voting Endpoints
    description: Joining election groups and casting votes. Requires *__voter__* `auth_token` cookie.
  - name: Public Endpoints
    description: Retrieving public data about elections. Without *__admin__* `auth_token` cookie, only finalised elections are visible.

paths:
  /auth/admin:
    post:
      summary: Authenticate as an admin.
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      requestBody:
        description: Admin user credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCredentials"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        401:
          description: Invalid credentials.
  /auth/voter/challenge:
    get:
      summary: Request an SMS OTP challenge for voter authentication.
      description:
        Sets an encrypted JWT cookie claiming a randomly generated OTP and the given SMS number to which it is sent.
        The JWT and cookie expire simultaneously after a configurable duration.
      parameters:
        - in: query
          name: sms
          schema:
            type: string
            pattern: '^\+?[1-9]\d{1,14}$'
            example: "+441234567890"
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      responses:
        200:
          description: Successfully sent OTP.
          headers:
            Set-Cookie:
              description:
                New `challenge` cookie.
                Encrypted JWT claiming an SMS number and OTP.
                Cookie expires when JWT does.
              schema:
                $ref: "#/components/schemas/Challenge"
  /auth/voter/verify:
    post:
      summary: Verify SMS OTP challenge to authenticate as a voter.
      description:
        Authenticates as a voter with the claimed SMS number if the submitted OTP matches the claimed OTP.
        Sets a voter `auth_token` that expires after a configurable duration.
      parameters:
        - in: cookie
          name: challenge
          schema:
            $ref: "#/components/schemas/Challenge"
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      requestBody:
        description: Submitted OTP.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
              required:
                - otp
              example:
                otp: "123456"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        401:
          description: Incorrect OTP.
  /auth:
    delete:
      summary: Remove authentication; log out.
      description: Removes the `auth_token` cookie.
      security: [ ] # No token needed to logout
      tags:
        - Authentication Endpoints
      responses:
        200:
          description: Logout successful, authentication token removed.
  /admins:
    post:
      summary: Create a new admin user.
      tags:
        - Administration Endpoints
      requestBody:
        description: Admin credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCredentials'
      responses:
        200:
          description: Successfully created.
    delete:
      summary: Delete an admin user.
      tags:
        - Administration Endpoints
      requestBody:
        description: Admin username.
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: Successfully deleted.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Admin username not found.
        422:
          description: Cannot delete the last admin user.
  /elections:
    post:
      summary: Create an election.
      tags:
        - Administration Endpoints
      requestBody:
        description: Election specification.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElectionSpec"
      responses:
        200:
          description: Successfully created election.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    get:
      summary: Fetch metadata of all elections.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ElectionMetadata"
  /elections/{electionID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Fetch an election.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched election.
          content:
            application.json:
              schema:
                $ref: "#/components/schemas/Election"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/ballots:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Fetch an election question's ballots.
      description:
        There may be a large number of ballots, so this request is paginated.
      parameters:
        - $ref: "#/components/parameters/PageNum"
        - $ref: "#/components/parameters/PageSize"
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched election question's ballots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: List of audited and confirmed ballot receipts.
                  pagination:
                    type: object
                    properties:
                      page_num:
                        type: integer
                        description: The actual page index retrieved.
                      page_size:
                        type: integer
                        description: The actual page size used.
                      total:
                        type: integer
                        description: The total number of ballots for this question.
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/ballots/{ballotID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
      - $ref: "#/components/parameters/BallotID"
    get:
      summary: Fetch a specific ballot.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched ballot receipt. May be a Confirmed or Audited receipt; the spec shows an Audited receipt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditedReceipt"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/totals:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Fetch the candidate totals for this question.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched candidate totals.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateTotalsMap"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/dump:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Dump the entire election state for this question.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully dumped question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionDump"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/join:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Ask if the current voter has already joined this election.
      tags:
        - Voting Endpoints
      responses:
        200:
          description: Successfully retrieved boolean answer.
          content:
            application/json:
              schema:
                type: boolean
                example: false
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Join an election for the first time, specifying groups.
      tags:
        - Voting Endpoints
      requestBody:
        description: Groups to join.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupMap"
      responses:
        200:
          description: Successfully joined groups.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          description:
            "`auth_token` cookie does not grant the required permissions, 
            or you have already joined this election."
        404:
          $ref: "#/components/responses/NotFound"
        422:
          description: "Violation of mutual exclusivity constraints in groups."
  /elections/{electionID}/questions/allowed:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Get which questions the current voter is allowed to vote on.
      description:
        A voter may vote on questions for which they satisfy the group
        constraints and have not already confirmed a vote.
        Votes may be cast and audited on any question, but confirmed only on those
        returned by this endpoint.
      tags:
        - Voting Endpoints
      responses:
        200:
          description: Successfully returned list of question IDs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IDList"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  /elections/{electionID}/votes/cast:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Submit provisional votes for stage-1 receipts.
      description:
        Register the voter's interest in voting for the given candidates on the given questions.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of votes: question-candidate ID pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotSpecList"
      responses:
        200:
          description: Successfully submitted provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnconfirmedReceipt"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/votes/audit:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Audit provisional votes for stage-2 receipts.
      description:
        Allows the voter to audit the choices, ensuring it is Cast As Intended.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of ballots to audit: signed ballot-question pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotRecallList"
      responses:
        200:
          description: Successfully audited provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditedReceipt"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/votes/confirm:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Confirm provisional votes for stage-2 receipts.
      description:
        This confirms the provisional votes, locking in the voter's candidate decisions.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of ballots to confirm: signed ballot-question pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotRecallList"
      responses:
        200:
          description: Successfully confirmed provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConfirmedReceipt"
        400:
          description: Not allowed to confirm at least one of these ballots.
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"

components:
  # Security
  securitySchemes:
    AuthToken:
      type: apiKey
      in: cookie
      name: auth_token
  # Payload Schemas
  schemas:
    ID:
      type: string
      example: 6220e27c5f06ce6366456650
    IDList:
      type: array
      items:
        $ref: "#/components/schemas/ID"
      minItems: 1
      uniqueItems: true
      example:
        - 6220e27c5f06ce6366456650
        - 6220e3b1069d947c996b5fb3
        - 6220e3b1069d947c996b5fb9
    AdminCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: "coordinator"
        password: "CorrectHorseBatteryStaple"
    Challenge:
      type: string
      example:  "challenge=PZdCgJeIc39mLMORSIVLNie9HotLcfbGaBKx6BEMrptxPfOlfbuxO5pa5Pd660aFtAILfv6aAmR2Y8Mgdt4uirqnFAMIYylLMsBP6CnAzak4K6Hm4iOcT4552Qhpbqh1WrekIOnFrTGVi08qv9XDeSjwluMgckxW6HlBZHIFL2Z4OMBODPo4uBHpe9Bt5pciM9rKaxIqmlCXwsLBm+yTExduCRqe7si39OTylgDWJt2dnBUL%2FRcZ; Path=/; HttpOnly; Expires=Fri, 10 Dec 2021 04:32:45 GMT;"
    AuthToken:
      type: string
      example: "auth_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOnsiJG9pZCI6IjYxYjJkZDNkYzEwODY3MzAyMjcwNjRhMCJ9LCJhZG0iOmZhbHNlLCJleHAiOjE2MzkxMTkxOTh9.bJqzVrH3ZFJuyKnoI9UAoYjqMsaQ51Fon43WUs5bGmQ; Path=/; HttpOnly;"
    GroupMap:
      type: object
      description: Object map from electorate names to group names.
      example:
        electorate1:
          - foo
          - bar
          - baz
        electorate2:
          - fizz
          - buzz
    QuestionSpec:
      type: object
      properties:
        description:
          type: string
        constraints:
          description:
            A disjunction of groups that the user must be in to vote on this question.
            Same format as `GroupMap`.
        candidates:
          type: array
          items:
            type: string
      required:
        - description
        - constraints
        - candidates
      example:
        description: Course Representative (Computer Science)
        constraints:
          Courses:
            - CompSci
            - Discrete Maths
        candidates:
          - Alice
          - Bob
    Question:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ID"
        description:
          type: string
        constraints:
          description:
            A disjunction of groups that the user must be in to vote on this question.
            Same format as `GroupMap`.
        candidates:
          type: array
          items:
            type: string
      required:
        - id
        - description
        - constraints
        - candidates
      example:
        id: 6220e3b1069d947c996b5f7a
        description: Course Representative (Computer Science)
        constraints:
          Courses:
            - CompSci
            - Discrete Maths
        candidates:
          - Alice
          - Bob
    Electorate:
      type: object
      properties:
        name:
          type: string
        groups:
          type: array
          items:
            type: string
        is_mutex:
          type: boolean
      required:
        - name
        - groups
        - is_mutex
      example:
        name: Courses
        groups:
          - CompSci
          - Maths
          - Discrete Maths
          - Physics
        is_mutex: true
    ElectionMetadata:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        finalised:
          type: boolean
        start_time:
          type: string
        end_time:
          type: string
      required:
        - name
        - finalised
        - start_time
        - end_time
      example:
        id: 6220e3b1069d947c996b5f7a
        name: Course Representatives
        finalised: true
        start_time: "2022-03-10T00:00:00Z"
        end_time: "2022-03-17T00:00::00Z"
    ElectionSpec:
      type: object
      properties:
        name:
          type: string
        finalised:
          type: boolean
        start_time:
          type: string
        end_time:
          type: string
        electorates:
          type: array
          items:
            $ref: "#/components/schemas/Electorate"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/QuestionSpec"
      required:
        - name
        - finalised
        - start_time
        - end_time
        - electorates
        - questions
      example:
        name: Course Representatives
        finalised: true
        start_time: "2022-03-10T00:00:00Z"
        end_time: "2022-03-17T00:00::00Z"
        electorates:
          - name: Courses
            groups:
              - CompSci
              - Maths
              - Discrete Maths
              - Physics
            is_mutex: true
        questions:
          - description: Course Representative (Computer Science)
            constraints:
              Courses:
                - CompSci
                - Discrete Maths
            candidates:
              - Alice
              - Bob
    Election:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        finalised:
          type: boolean
        start_time:
          type: string
        end_time:
          type: string
        electorates:
          type: array
          items:
            $ref: "#/components/schemas/Electorate"
        questions:
          type: object
          description: Object map from question ID to `Question`.
        crypto:
          type: object
          properties:
            g1:
              type: string
            g2:
              type: string
            public_key:
              type: string
      required:
        - id
        - name
        - finalised
        - start_time
        - end_time
        - electorates
        - questions
        - crypto
    BallotSpec:
      type: object
      properties:
        question:
          $ref: "#/components/schemas/ID"
        candidate:
          type: string
      required:
        - question
        - candidate
      example:
        question: 6220e27c5f06ce6366456650
        candidate: Alice
    BallotSpecList:
      type: array
      items:
        $ref: "#/components/schemas/BallotSpec"
      minItems: 1
      uniqueItems: true
      example:
        - question: 6220e27c5f06ce6366456650
          candidate: Alice
        - question: 6220e27c5f06ce6366456651
          candidate: Bob
    VoteProof:
      type: object
      properties:
        c1:
          type: string
        c2:
          type: string
        r1:
          type: string
        r2:
          type: string
      required:
        - c1
        - c2
        - r1
        - r2
    VoteReceipt:
      type: object
      properties:
        R:
          type: string
        Z:
          type: string
        pwf:
          $ref: "#/components/schemas/VoteProof"
      required:
        - R
        - Z
        - pwf
    AuditedVoteReceipt:
      type: object
      properties:
        r:
          type: string
        v:
          type: string
        R:
          type: string
        Z:
          type: string
        pwf:
          $ref: "#/components/schemas/VoteProof"
      required:
        - r
        - v
        - R
        - Z
        - pwf
    UnconfirmedReceipt:
      type: object
      properties:
        ballot_id:
          $ref: "#/components/schemas/ID"
        election_id:
          $ref: "#/components/schemas/ID"
        question_id:
          $ref: "#/components/schemas/ID"
        state:
          type: string
          description: Always "Unconfirmed".
        signature:
          type: string
        votes:
          description: Object map from candidate names to `VoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - signature
        - votes
        - pwf
      example:
        ballot_id: 6220e27c5f06ce6366456650
        election_id: 6220e27fbacbe75634ff900
        question_id: 6220e27fbacbe75634ff901
        state: "Unconfirmed"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    AuditedReceipt:
      type: object
      properties:
        ballot_id:
          $ref: "#/components/schemas/ID"
        election_id:
          $ref: "#/components/schemas/ID"
        question_id:
          $ref: "#/components/schemas/ID"
        state:
          type: string
          description: Always "Audited".
        signature:
          type: string
        votes:
          description: Object map from candidate names to `AuditedVoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - signature
        - votes
        - pwf
      example:
        ballot_id: 6220e27c5f06ce6366456650
        election_id: 6220e27fbacbe75634ff900
        question_id: 6220e27fbacbe75634ff901
        state: "Audited"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            r: "vMPSY54TVTLaLjTFv0MskgcwQmg0BUTb6AL9pzQbiT8"
            v: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            r: "ASZwPK8DUe4wrXDJIid39tP7nIuev6UGHtQbUvKskpg"
            v: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE"
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    ConfirmedReceipt:
      type: object
      properties:
        ballot_id:
          $ref: "#/components/schemas/ID"
        election_id:
          $ref: "#/components/schemas/ID"
        question_id:
          $ref: "#/components/schemas/ID"
        state:
          type: string
          description: Always "Confirmed".
        signature:
          type: string
        votes:
          description: Object map from candidate names to `VoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - signature
        - votes
        - pwf
      example:
        ballot_id: 6220e27c5f06ce6366456650
        election_id: 6220e27fbacbe75634ff900
        question_id: 6220e27fbacbe75634ff901
        state: "Confirmed"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    CandidateTotalsMap:
      type: object
      description: Object map from candidate names to cryptographic totals.
      example:
        Alice:
          election_id: 6220f19eac8b8ef619e64b47
          question_id: 6220f19eac8b8ef619e64b43
          candidate_name: Alice
          tally: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI
          r_sum: sMKVUojysFflEY47ebE-9XmrRVtmPjQcpeLm33TUIxk
        Bob:
          election_id: 6220f19eac8b8ef619e64b47
          question_id: 6220f19eac8b8ef619e64b43
          candidate_name: Bob
          tally: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM
          r_sum: qJk5LeSZZcwnuvXKo0nbZ0g8k0a0dVb_Qw05FkmMoXI
    BallotRecall:
      type: object
      properties:
        ballot_id:
          $ref: "#/components/schemas/ID"
        question_id:
          $ref: "#/components/schemas/ID"
        signature:
          type: string
      required:
        - ballot_id
        - question_id
        - signature
      example:
        ballot_id: 6220e27c5f06ce6366456650
        question_id: 6220e27fbacbe75634ff901
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
    BallotRecallList:
      type: array
      items:
        $ref: "#/components/schemas/BallotRecall"
    QuestionDump:
      type: object
      properties:
        election:
          type: object
          properties:
            g1:
              type: string
            g2:
              type: string
            public_key:
              type: string
        audited:
          type: object
          description: Object map from ballot IDs to audited ballots.
        confirmed:
          type: object
          description: Object map from ballot IDs to confirmed ballots.
        totals:
          type: object
          description: Object map from candidate names to totals.
  # Common parameters
  parameters:
    ElectionID:
      name: electionID
      in: path
      required: true
      description: The ID of the election to operate on.
      schema:
        $ref: "#/components/schemas/ID"
    QuestionID:
      name: questionID
      in: path
      required: true
      description: The ID of the election question to operate on.
      schema:
        $ref: "#/components/schemas/ID"
    BallotID:
      name: ballotID
      in: path
      required: true
      description: The ID of the ballot to operate on.
      schema:
        type: integer
        example: 12345
    PageNum:
      name: page_num
      in: query
      description: The page index into paginated data, starting at 1.
      schema:
        type: integer
        default: 1
        example: 5
    PageSize:
      name: page_size
      in: query
      description:
        The requested size of a single paginated batch.
        The API may impose a maximum or minimum on this parameter.
      schema:
        type: integer
        default: 50
        maximum: 1000
        example: 100
  # Common Responses
  responses:
    AuthToken:
      description: Successfully authenticated.
      headers:
        Set-Cookie:
          schema:
            $ref: "#/components/schemas/AuthToken"
    BadRequest:
      description: Request was malformed.
    Unauthorized:
      description:
        "`auth_token` cookie is absent, invalid, or expired."
    Forbidden:
      description:
        "`auth_token` cookie does not grant the required permissions."
    NotFound:
      description: Requested resource was not found.
    InternalServerError:
      description: The server encountered an error.

openapi: 3.0.3
info:
  title: DRE-ip Server API
  version: 1.0.0
servers:
  - description: Backend Server
    url: Self-Hosted
security:
  - AuthToken: [ ]  # Require AuthToken by default.

tags:
  - name: Information API
  - name: Login API
  - name: Election Management API
    description: Requires an admin-level AUTHTOKEN cookie.
  - name: Voting API
    description: Requires a voter-level AUTHTOKEN cookie.

paths:
  # --- Information API ---
  # Retrieve all elections
  /elections:
    get:
      summary: Retrieve all elections.
      description: "Non-finalised elections are excluded from the result unless
      authenticated as admin."
      security: [ ]  # No authentication needed.
      tags:
        - Information API
      responses:
        200:
          description: Array of elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Election"
  # Retrieve all votes for an election
  /election/{electionID}/votes:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/PageNum"
      - $ref: "#/components/parameters/PageSize"
    get:
      summary: Retrieve votes for an election.
      description: "There may be a large number of votes, so this request is
      paginated. The page size may be at most 1000, and defaults to 50."
      security: [ ]  # No authentication needed.
      tags:
        - Information API
      responses:
        200:
          description: Votes plus pagination metadata.
          content:
            application/json:
              schema:
                type: object
                properties:
                  votes:
                    type: array
                    description: List of vote receipts.
                    items:
                      $ref: "#/components/schemas/Stage2Receipt"
                  page_num:
                    type: integer
                    description: The actual page index retrieved.
                  page_size:
                    type: integer
                    description: The actual page size used.
                  total_votes:
                    type: integer
                    description: The total number of votes for this election.
              example:
                votes:
                  - id: 51
                    R: abcdef
                    Z: 098765
                    P: fedcba
                    action: "confirmed"
                  - id: 52
                    R: 123abc
                    Z: def456
                    P: 1a2b3c
                    action: "audited"
                    r: fafafa
                    v: 0
                page_num: 2
                page_size: 50
                total_votes: 52
        404:
          $ref: "#/components/responses/NotFound"
  # Retrieve a specific vote by ID
  /election/{electionID}/vote/{voteID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/VoteID"
    get:
      summary: Retrieve a single vote.
      security: [ ]  # No authentication needed.
      tags:
        - Information API
      responses:
        200:
          description: A single vote record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2Receipt"
        404:
          $ref: "#/components/responses/NotFound"
  # --- Login API ---
  # Admin login via password
  /login/admin:
    post:
      summary: Attempt to authenticate as admin via the admin password.
      security: [ ]  # No token needed before login.
      tags:
        - Login API
      requestBody:
        description: Admin password.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminLogin"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          description: Incorrect password.
  # User request OTP
  /login/voter/request-otp:
    post:
      summary: Request an OTP for voter authentication.
      security: [ ]  # No token needed before login.
      tags:
        - Login API
      requestBody:
        description: Voter SMS number.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoterSMSNumber"
      responses:
        200:
          description: OTP successfully sent.
        400:
          $ref: "#/components/responses/BadFormat"
  # User login via OTP
  /login/voter/submit-otp:
    post:
      summary: Submit an OTP to authenticate as a voter.
      security: [ ]  # No token needed before login.
      tags:
        - Login API
      requestBody:
        description: Voter SMS number and OTP.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoterOTP"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          description: Incorrect OTP.
  # User logout
  /login/voter/logout:
    post:
      summary: Removes a voter's proof of authentication.
      security: [ ] # No token needed to logout
      tags:
        - Login API
      responses:
        200:
          description: Logout successful, authentication token removed.
  # --- Election Management API ---
  # Create an election.
  /election:
    post:
      summary: Create a new empty election.
      tags:
        - Election Management API
      requestBody:
        description: "Initial election structure (optional).
        The ID field is ignored, as one will be allocated."
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Election"
      responses:
        201:
          description: Creation successful. Returns the resulting Election object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
  /election/{electionID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    # Modify an election
    put:
      summary: Replace the given election with the supplied structure.
      description: "Any modification to an election will reset it,
      destroying any votes that have already been cast for it."
      tags:
        - Election Management API
      requestBody:
        description: "New election structure.
        The ID must match the ID in the URL."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Election"
      responses:
        200:
          description: Modification successful.
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
    # Delete an election.
    delete:
      summary: Permanently delete the given election.
      tags:
        - Election Management API
      responses:
        200:
          description: Deletion successful.
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # --- Voting API ---
  /election/{electionID}/voter/groups:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Retrieve the groups that the current voter belongs to.
      description: "This information is deliberately available for only
      the current user; not even the admin can see it. This is because
      group membership may constitute personal information."
      tags:
        - Voting API
      responses:
        200:
          description: List of group IDs, or null if groups not yet set.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IDList"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Set the groups of the current voter.
      description: This can only be done once per voter per election.
      tags:
        - Voting API
      requestBody:
        description: List of group IDs.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IDList"
      responses:
        200:
          description: Group selection successful.
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          description: Groups already set.
  /election/{electionID}/voter/voted:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Retrieve the questions that the current voter has already voted on.
      tags:
        - Voting API
      responses:
        200:
          description: List of question IDs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IDList"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Submit provisional vote(s)
  /election/{electionID}/vote:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Submit provisional vote(s) and get a stage-1 receipt.
      tags:
        - Voting API
      requestBody:
        description: "List of votes: question-candidate ID pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteList"
      responses:
        200:
          description: Stage-1 receipt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage1Receipt"
        400:
          $ref: "#/components/responses/BadFormat"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Cancel provisional vote
  /election/{electionID}/vote/cancel:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Cancel the in-progress provisional vote.
      description: "This audits the vote, allowing Cast As Intended to be
      verified. The choices can be changed before submitting another
      provisional vote."
      tags:
        - Voting API
      responses:
        200:
          description: Stage-2 receipt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2Receipt"
        400:
          $ref: "#/components/responses/NoPendingVote"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"
  # Confirm provisional vote
  /election/{electionID}/vote/confirm:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Confirm the in-progress provisional vote.
      description: "This confirms the vote, casting the ballot and locking
      in the choices."
      tags:
        - Voting API
      responses:
        200:
          description: Stage-2 receipt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage2Receipt"
              example:
                id: 12345
                R: 329a7f6d7e8c5a5b
                Z: 8a6db9c9ee90f122
                P: 1298badfc7896fc7
                action: "confirmed"
        400:
          $ref: "#/components/responses/NoPendingVote"
        401:
          $ref: "#/components/responses/NotLoggedIn"
        403:
          $ref: "#/components/responses/PermissionDenied"
        404:
          $ref: "#/components/responses/NotFound"

components:
  # Security
  securitySchemes:
    AuthToken:
      type: apiKey
      in: cookie
      name: AUTHTOKEN
  # Payload Schemas
  schemas:
    AdminLogin:
      type: object
      properties:
        password:
          type: string
      required:
        - password
      example:
        password: "CorrectHorseBatteryStaple"
    VoterSMSNumber:
      type: object
      properties:
        sms:
          type: string
      required:
        - sms
      example:
        sms: "+441234567890"
    VoterOTP:
      type: object
      properties:
        sms:
          type: string
        otp:
          type: string
      required:
        - sms
        - otp
      example:
        sms: "+441234567890"
        otp: "123456"
    AuthToken:
      type: string
      example: AUTHTOKEN=abc.123.xyz
    Candidate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    Question:
      type: object
      properties:
        id:
          type: string
        desc:
          type: string
        groupConstraints:
          type: array
          items:
            type: string
        candidates:
          type: array
          items:
            $ref: "#/components/schemas/Candidate"
      required:
        - id
        - desc
        - groupConstraints
        - candidates
      example:
        id: 7b7c0917-060c-45cf-ace8-b8b834765d6f
        desc: Course Representative (Computer Science)
        groupConstraints: [07b185d2-7f75-4409-ad47-9dc8bb95cb4d]
        candidates:
          - id: 398fc139-c26c-44ea-8af9-c09009091442
            name: Alice
          - id: cc75eb78-dd87-472b-b80c-4eeb55a69e2c
            name: Bob
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        mutexSet:
          type: string
      required:
        - id
        - name
      example:
        id: 07b185d2-7f75-4409-ad47-9dc8bb95cb4d
        name: Computer Science Students
        mutexSet: courses
    Election:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        finalised:
          type: boolean
        startTime:
          type: string
        endTime:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/Group"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      required:
        - id
        - name
        - finalised
        - startTime
        - endTime
        - groups
        - questions
      example:
        id: 7b1c5646-4cf8-4507-8ff4-bb8580214622
        name: SU Election
        finalised: true
        startTime: 2021-10-01T00:00:00Z
        endTime: 2021-10-08T00:00:00Z
        groups:
          - id: 07b185d2-7f75-4409-ad47-9dc8bb95cb4d
            name: Computer Science Students
        questions:
          - id: 7b7c0917-060c-45cf-ace8-b8b834765d6f
            desc: Course Representative (Computer Science)
            groupConstraints: [ 07b185d2-7f75-4409-ad47-9dc8bb95cb4d ]
            candidates:
              - id: 398fc139-c26c-44ea-8af9-c09009091442
                name: Alice
              - id: cc75eb78-dd87-472b-b80c-4eeb55a69e2c
                name: Bob
    IDList:
      type: array
      items:
        type: string
      example:
        - e041990c-5edc-4bdc-94ed-406a4b9759c3
        - 814d342b-acee-4848-b004-857ff77cf29f
        - ddf94a22-6d6f-4c73-9cba-00d1d83dd537
    Vote:
      type: object
      properties:
        question:
          type: string
        candidate:
          type: string
      required:
        - question
        - candidate
      example:
        question: 7b7c0917-060c-45cf-ace8-b8b834765d6f
        candidate: 398fc139-c26c-44ea-8af9-c09009091442
    VoteList:
      type: array
      items:
        $ref: "#/components/schemas/Vote"
      example:
        - question: 7b7c0917-060c-45cf-ace8-b8b834765d6f
          candidate: 398fc139-c26c-44ea-8af9-c09009091442
        - question: aa74a53e-e9b6-4f46-b73e-3ec41e583a1c
          candidate: 9a2ee202-6fb8-4fdb-89ec-c60a14999f7c
    Stage1Ballot:
      type: object
      properties:
        R:
          type: string
          description: Public random component.
        Z:
          type: string
          description: Public vote component.
        P:
          type: string  # TODO what is actual format of P?
          description: Public zero-knowledge proof component.
      required:
        - R
        - Z
        - P
      example:
        R: 329a7f6d7e8c5a5b
        Z: 8a6db9c9ee90f122
        P: 1298badfc7896fc7
    Stage2Ballot:
      type: object
      properties:
        R:
          type: string
          description: Public random component.
        Z:
          type: string
          description: Public vote component.
        P:
          type: string
          description: Public zero-knowledge proof component.
        action:
          type: string
          description: "Either 'confirmed' or 'audited'."
        r:
          type: string
          description: Secret random component; only present for audited votes.
        v:
          type: integer
          description: Secret vote component; only present for audited votes.
      required:
        - R
        - Z
        - P
        - action
      example:
        R: 329a7f6d7e8c5a5b
        Z: 8a6db9c9ee90f122
        P: 1298badfc7896fc7
        action: "audited"
        r: 1298cd98c28e90a0
        v: 1
    Stage1Receipt:
      type: object
      properties:
        id:
          type: integer
        ballots:
          type: array
          items:
            $ref: "#/components/schemas/Stage1Ballot"
      required:
        - id
        - ballots
      example:
        id: 12345
        ballots:
          - R: 329a7f6d7e8c5a5b
            Z: 8a6db9c9ee90f122
            P: 1298badfc7896fc7
    Stage2Receipt:
      description: "A stage 2 receipt contains all the information of a stage 1
      receipt, but additionally has been either confirmed or audited.

      An audited receipt will include the secrets `r` and `v` for verification
      purposes; a confirmed receipt will not."
      type: object
      properties:
        id:
          type: integer
        ballots:
          type: array
          items:
            $ref: "#/components/schemas/Stage2Ballot"
      required:
        - id
        - ballots
      example:
        id: 12345
        ballots:
          - R: 329a7f6d7e8c5a5b
            Z: 8a6db9c9ee90f122
            P: 1298badfc7896fc7
            action: "audited"
            r: 1298cd98c28e90a0
            v: 1
  # Common parameters
  parameters:
    ElectionID:
      name: electionID
      in: path
      required: true
      description: The ID of the election to operate on.
      schema:
        type: string
      example: .../7b1c5646-4cf8-4507-8ff4-bb8580214622/...
    VoteID:
      name: voteID
      in: path
      required: true
      description: The ID of the vote to operate on.
      schema:
        type: integer
      example: .../12345/...
    PageNum:
      name: page_num
      in: query
      description: The page index into paginated data, starting at 1.
      schema:
        type: integer
      example: ?page_num=5
    PageSize:
      name: page_size
      in: query
      description: "The requested size of a single paginated batch.
      The API may impose a maximum or minimum on this parameter."
      schema:
        type: integer
      example: ?page_size=100
  # Common Responses
  responses:
    AuthToken:
      description: Login successful, token returned.
      headers:
        Set-Cookie:
          schema:
            $ref: "#/components/schemas/AuthToken"
    BadFormat:
      description: Bad request format.
    NotLoggedIn:
      description: No AUTHTOKEN cookie present.
    PermissionDenied:
      description: AUTHTOKEN cookie is invalid or does not give you the required permissions.
    NotFound:
      description: Not Found.
    NoPendingVote:
      description: No in-progress provisional vote.

openapi: 3.0.3
info:
  title: DRE-ip Server API
  description:
    Assume any endpoint can return status 500 in the case of an unexpected error;
    particularly database errors.
    Listed 4xx errors cannot be assumed to be exhaustive either; the client must
    be able to handle any returned error code.
  version: 1.0.0
servers:
  - description: Backend Server
    url: Self-Hosted
security:
  - AuthToken: [ ]  # Require AuthToken by default.

tags:
  - name: Authentication Endpoints
    description: Adds/removes admin/voter `auth_token` cookie.
  - name: Administration Endpoints
    description: Admin user and election management. Requires *__admin__* `auth_token` cookie.
  - name: Voting Endpoints
    description: Joining election groups and casting votes. Requires *__voter__* `auth_token` cookie.
  - name: Public Endpoints
    description: Retrieving public data about elections. Draft elections can only be seen with an *__admin__* `auth_token` cookie.

paths:
  /auth/admin:
    post:
      summary: Authenticate as an admin.
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      requestBody:
        description: Admin user credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCredentials"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        401:
          description: Invalid credentials.
  /auth/voter/challenge:
    post:
      summary: Request an SMS OTP challenge for voter authentication.
      description:
        Sets an encrypted JWT cookie claiming a randomly generated OTP and the given SMS number to which it is sent.
        The JWT and cookie expire simultaneously after a configurable duration.
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      requestBody:
        description: SMS and reCAPTCHA token.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sms:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
                  example: "+441234567890"
                g_recaptcha_response:
                  type: string
              required:
                - sms
                - g_recaptcha_response
      responses:
        200:
          description: Successfully sent OTP.
          headers:
            Set-Cookie:
              description:
                New `challenge` cookie.
                Encrypted JWT claiming an SMS number and OTP.
                Cookie expires when JWT does.
              schema:
                $ref: "#/components/schemas/Challenge"
        401:
          description: Invalid reCAPTCHA token.
        422:
          description: Invalid phone number.
  /auth/voter/verify:
    post:
      summary: Verify SMS OTP challenge to authenticate as a voter.
      description:
        Authenticates as a voter with the claimed SMS number if the submitted OTP matches the claimed OTP.
        Sets a voter `auth_token` that expires after a configurable duration.
      parameters:
        - in: cookie
          name: challenge
          schema:
            $ref: "#/components/schemas/Challenge"
      security: [ ]  # No token needed before login.
      tags:
        - Authentication Endpoints
      requestBody:
        description: Submitted OTP.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  minLength: 6
                  maxLength: 6
              required:
                - otp
              example:
                otp: "123456"
      responses:
        200:
          $ref: "#/components/responses/AuthToken"
        401:
          description: Incorrect OTP.
  /auth:
    delete:
      summary: Remove authentication; log out.
      description: Removes the `auth_token` cookie.
      security: [ ] # No token needed to logout
      tags:
        - Authentication Endpoints
      responses:
        200:
          description: Logout successful, authentication token removed.
  /admins:
    get:
      summary: Get a list of all admin usernames.
      tags:
        - Administration Endpoints
      responses:
        200:
          description: Successfully returned all admins.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example:
                - "alice112"
                - "bobthesuperadmin"
    post:
      summary: Create a new admin user.
      description:
        The username must be non-empty, and the password must be at least 8
        characters long.
      tags:
        - Administration Endpoints
      requestBody:
        description: Admin credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCredentials'
      responses:
        200:
          description: Successfully created.
        400:
          description: Illegal credentials.
  /admins/{username}:
    parameters:
      - in: path
        name: username
        required: true
        description:
          The username of the admin to delete.
        schema:
          type: string
    delete:
      summary: Delete an admin user.
      tags:
        - Administration Endpoints
      responses:
        200:
          description: Successfully deleted.
        404:
          description: Admin username not found.
        422:
          description: Cannot delete the last admin user.
  /elections:
    post:
      summary: Create an election.
      description:
        Newly-created elections are in the draft state, and must be published
        to be visible to voters.
      tags:
        - Administration Endpoints
      requestBody:
        description: Election specification.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElectionSpec"
      responses:
        200:
          description: Successfully created election.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
    get:
      summary: Fetch metadata of all elections.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      parameters:
        - in: query
          name: archived
          required: false
          description:
            Archived elections are excluded by default. To see them, pass `?archived=true`;
            this will show _only_ archived elections.
          schema:
            type: boolean
      responses:
        200:
          description: Successfully fetched elections.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ElectionMetadata"
  /elections/{electionID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Fetch an election.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched election.
          content:
            application.json:
              schema:
                $ref: "#/components/schemas/Election"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      summary: Modify an election.
      description:
        Only draft elections or published elections before their start time
        may be modified.
        Modifying a published election will reset it, sending it back to the
        draft state.
      tags:
        - Administration Endpoints
      requestBody:
        description: Election specification.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ElectionSpec"
      responses:
        200:
          description: Successfully modified election.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Election"
        400:
          description: Election is not allowed to be modified.
    delete:
      summary: Permanently delete an election.
      description:
        Only draft or archived elections may be deleted. This will irrecoverably
        destroy all election data, including ballots and totals.
      tags:
        - Administration Endpoints
      responses:
        200:
          description: Successfully deleted election.
        400:
          description: Election is not allowed to be deleted.
  /elections/{electionID}/publish:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Publish a draft election.
      description:
        Once published, an election will be visible to voters.
        If it is within the start and end time, a published election will be
        votable.
        After the start time has passed, the election becomes locked and cannot
        be modified, only archived (and afterwards deleted).
      tags:
        - Administration Endpoints
      responses:
        200:
          description: Successfully published election.
        400:
          description: Election was not in the draft state.
  /elections/{electionID}/archive:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Archive an election.
      description:
        Once archived, an election will be hidden by default, but its data is
        still publically available.
        Archiving an in-progress election will immediately stop it.
      tags:
        - Administration Endpoints
      responses:
        200:
          description: Successfully archived election.
        400:
          description: Election was already archived.
  /elections/{electionID}/{questionID}/ballots:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Fetch an election question's ballots.
      description:
        There may be a large number of ballots, so this request is paginated.
      parameters:
        - $ref: "#/components/parameters/PageNum"
        - $ref: "#/components/parameters/PageSize"
        - name: filter_pattern
          in: query
          required: false
          description:
            A regular expression specifying a filter on ballot IDs.
          schema:
            type: string
            example: "123"
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched election question's ballots.
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: List of receipts.
                  pagination:
                    type: object
                    properties:
                      page_num:
                        type: integer
                        description: The actual page index retrieved.
                      page_size:
                        type: integer
                        description: The actual page size used.
                      total:
                        type: integer
                        description: The total number of ballots for this question.
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/ballots/{ballotID}:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
      - $ref: "#/components/parameters/BallotID"
    get:
      summary: Fetch a specific ballot.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched ballot receipt. May be any kind of receipt; the spec shows an Unconfirmed receipt.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnconfirmedReceiptStub"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/totals:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Fetch the candidate totals for this question. The election must have finished.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully fetched candidate totals.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CandidateTotalsMap"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/{questionID}/dump:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
      - $ref: "#/components/parameters/QuestionID"
    get:
      summary: Dump the entire election state for this question.
               Only includes candidate totals if the election has finished.
      security: [ ]  # No authentication needed.
      tags:
        - Public Endpoints
      responses:
        200:
          description: Successfully dumped question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuestionDump"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/join:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Ask if the current voter has already joined this election.
      tags:
        - Voting Endpoints
      responses:
        200:
          description: Successfully retrieved boolean answer.
          content:
            application/json:
              schema:
                type: boolean
                example: false
        404:
          $ref: "#/components/responses/NotFound"
    post:
      summary: Join an election for the first time, specifying groups.
      tags:
        - Voting Endpoints
      requestBody:
        description: Groups to join.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupMap"
      responses:
        200:
          description: Successfully joined groups.
        403:
          description: You have already joined this election.
        404:
          $ref: "#/components/responses/NotFound"
        422:
          description: "Violation of mutual exclusivity constraints in groups."
  /elections/{electionID}/questions/allowed:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    get:
      summary: Get which questions the current voter is allowed to vote on.
      description:
        A voter may *cast and audit* votes on any question. However, they may
        only *confirm* votes on questions for which they satisfy the group
        constraints and have not already confirmed a vote.
        
        This endpoint returns all questions that the current voter satisfies
        the group constraints for. Each question ID is mapped to a boolean
        specifying whether or not this question has already been confirmed.
        
        Therefore, the questions that the voter can confirm votes on are those
        that appear in this map and are mapped to `false`.
      tags:
        - Voting Endpoints
      responses:
        200:
          description: Successfully returned map of question IDs.
          content:
            application/json:
              schema:
                type: object
                example:
                  "6220e27c5f06ce6366456650": false
                  "6220e3b1069d947c996b5fb3": true
                  "6220e3b1069d947c996b5fb9": true
  /elections/{electionID}/votes/cast:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Submit provisional votes for stage-1 receipts.
      description:
        Register the voter's interest in voting for the given candidates on the given questions.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of votes: question-candidate ID pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotSpecList"
      responses:
        200:
          description: Successfully submitted provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnconfirmedReceiptFull"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/votes/audit:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Audit provisional votes for stage-2 receipts.
      description:
        Allows the voter to audit the choices, ensuring it is Cast As Intended.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of ballots to audit: signed ballot-question pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotRecallList"
      responses:
        200:
          description: Successfully audited provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditedReceipt"
        404:
          $ref: "#/components/responses/NotFound"
  /elections/{electionID}/votes/confirm:
    parameters:
      - $ref: "#/components/parameters/ElectionID"
    post:
      summary: Confirm provisional votes for stage-2 receipts.
      description:
        This confirms the provisional votes, locking in the voter's candidate decisions.
        This endpoint is atomic.
      tags:
        - Voting Endpoints
      requestBody:
        description: "List of ballots to confirm: signed ballot-question pairs."
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BallotRecallList"
      responses:
        200:
          description: Successfully confirmed provisional votes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConfirmedReceipt"
        400:
          description: Not allowed to confirm at least one of these ballots.
        404:
          $ref: "#/components/responses/NotFound"

components:
  # Security
  securitySchemes:
    AuthToken:
      type: apiKey
      in: cookie
      name: auth_token
  # Payload Schemas
  schemas:
    AdminCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
      example:
        username: "coordinator"
        password: "CorrectHorseBatteryStaple"
    Challenge:
      type: string
      example:  "challenge=PZdCgJeIc39mLMORSIVLNie9HotLcfbGaBKx6BEMrptxPfOlfbuxO5pa5Pd660aFtAILfv6aAmR2Y8Mgdt4uirqnFAMIYylLMsBP6CnAzak4K6Hm4iOcT4552Qhpbqh1WrekIOnFrTGVi08qv9XDeSjwluMgckxW6HlBZHIFL2Z4OMBODPo4uBHpe9Bt5pciM9rKaxIqmlCXwsLBm+yTExduCRqe7si39OTylgDWJt2dnBUL%2FRcZ; Path=/; HttpOnly; Expires=Fri, 10 Dec 2021 04:32:45 GMT;"
    AuthToken:
      type: string
      example: "auth_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1aWQiOnsiJG9pZCI6IjYxYjJkZDNkYzEwODY3MzAyMjcwNjRhMCJ9LCJhZG0iOmZhbHNlLCJleHAiOjE2MzkxMTkxOTh9.bJqzVrH3ZFJuyKnoI9UAoYjqMsaQ51Fon43WUs5bGmQ; Path=/; HttpOnly;"
    GroupMap:
      type: object
      description: Object map from electorate names to group names.
      example:
        electorate1:
          - foo
          - bar
          - baz
        electorate2:
          - fizz
          - buzz
    QuestionSpec:
      type: object
      properties:
        description:
          type: string
        constraints:
          description:
            A disjunction of groups that the user must be in to vote on this question.
            Same format as `GroupMap`.
        candidates:
          type: array
          items:
            type: string
      required:
        - description
        - constraints
        - candidates
      example:
        description: Course Representative (Computer Science)
        constraints:
          Courses:
            - CompSci
            - Discrete Maths
        candidates:
          - Alice
          - Bob
    Question:
      type: object
      properties:
        id:
          type: integer
        description:
          type: string
        constraints:
          description:
            A disjunction of groups that the user must be in to vote on this question.
            Same format as `GroupMap`.
        candidates:
          type: array
          items:
            type: string
      required:
        - id
        - description
        - constraints
        - candidates
      example:
        id: 12
        description: Course Representative (Computer Science)
        constraints:
          Courses:
            - CompSci
            - Discrete Maths
        candidates:
          - Alice
          - Bob
    Electorate:
      type: object
      properties:
        name:
          type: string
        groups:
          type: array
          items:
            type: string
        is_mutex:
          type: boolean
      required:
        - name
        - groups
        - is_mutex
      example:
        name: Courses
        groups:
          - CompSci
          - Maths
          - Discrete Maths
          - Physics
        is_mutex: true
    ElectionMetadata:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        state:
          type: string
        start_time:
          type: string
        end_time:
          type: string
      required:
        - name
        - state
        - start_time
        - end_time
      example:
        id: 5
        name: Course Representatives
        state: Published
        start_time: "2022-03-10T00:00:00Z"
        end_time: "2022-03-17T00:00::00Z"
    ElectionSpec:
      type: object
      properties:
        name:
          type: string
        start_time:
          type: string
        end_time:
          type: string
        electorates:
          type: array
          items:
            $ref: "#/components/schemas/Electorate"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/QuestionSpec"
      required:
        - name
        - start_time
        - end_time
        - electorates
        - questions
      example:
        name: Course Representatives
        start_time: "2022-03-10T00:00:00Z"
        end_time: "2022-03-17T00:00::00Z"
        electorates:
          - name: Courses
            groups:
              - CompSci
              - Maths
              - Discrete Maths
              - Physics
            is_mutex: true
        questions:
          - description: Course Representative (Computer Science)
            constraints:
              Courses:
                - CompSci
                - Discrete Maths
            candidates:
              - Alice
              - Bob
    Election:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        state:
          type: string
        start_time:
          type: string
        end_time:
          type: string
        electorates:
          type: array
          items:
            $ref: "#/components/schemas/Electorate"
        questions:
          type: object
          description: Object map from question ID to `Question`.
        crypto:
          type: object
          properties:
            g1:
              type: string
            g2:
              type: string
            public_key:
              type: string
      required:
        - id
        - name
        - state
        - start_time
        - end_time
        - electorates
        - questions
        - crypto
    BallotSpec:
      type: object
      properties:
        question:
          type: integer
        candidate:
          type: string
      required:
        - question
        - candidate
      example:
        question: 14
        candidate: Alice
    BallotSpecList:
      type: array
      items:
        $ref: "#/components/schemas/BallotSpec"
      minItems: 1
      uniqueItems: true
      example:
        - question: 6220e27c5f06ce6366456650
          candidate: Alice
        - question: 6220e27c5f06ce6366456651
          candidate: Bob
    VoteProof:
      type: object
      properties:
        c1:
          type: string
        c2:
          type: string
        r1:
          type: string
        r2:
          type: string
      required:
        - c1
        - c2
        - r1
        - r2
    VoteReceipt:
      type: object
      properties:
        R:
          type: string
        Z:
          type: string
        pwf:
          $ref: "#/components/schemas/VoteProof"
      required:
        - R
        - Z
        - pwf
    AuditedVoteReceipt:
      type: object
      properties:
        r:
          type: string
        v:
          type: string
        R:
          type: string
        Z:
          type: string
        pwf:
          $ref: "#/components/schemas/VoteProof"
      required:
        - r
        - v
        - R
        - Z
        - pwf
    UnconfirmedReceiptStub:
      type: object
      properties:
        ballot_id:
          type: integer
        election_id:
          type: integer
        question_id:
          type: integer
        state:
          type: string
          description: Always "Unconfirmed".
        confirmation_code:
          type: string
        signature:
          type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - confirmation_code
        - signature
      example:
        ballot_id: 12345
        election_id: 123
        question_id: 55
        state: "Unconfirmed"
        confirmation_code: "YNEDDW2KR3P2IWCIQK2PWL2265YODQFDXLKNBRT3A64AT2T3V2"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
    UnconfirmedReceiptFull:
      type: object
      properties:
        ballot_id:
          type: integer
        election_id:
          type: integer
        question_id:
          type: integer
        state:
          type: string
          description: Always "Unconfirmed".
        confirmation_code:
          type: string
        signature:
          type: string
        votes:
          description: Object map from candidate names to `VoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - confirmation_code
        - signature
        - votes
        - pwf
      example:
        ballot_id: 12345
        election_id: 56
        question_id: 578
        state: "Unconfirmed"
        confirmation_code: "YNEDDW2KR3P2IWCIQK2PWL2265YODQFDXLKNBRT3A64AT2T3V2"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    AuditedReceipt:
      type: object
      properties:
        ballot_id:
          type: integer
          example: 12345
        election_id:
          type: integer
        question_id:
          type: integer
        state:
          type: string
          description: Always "Audited".
        confirmation_code:
          type: string
        signature:
          type: string
        votes:
          description: Object map from candidate names to `AuditedVoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - confirmation_code
        - signature
        - votes
        - pwf
      example:
        ballot_id: 12345
        election_id: 34
        question_id: 9
        state: "Audited"
        confirmation_code: "YNEDDW2KR3P2IWCIQK2PWL2265YODQFDXLKNBRT3A64AT2T3V2"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            r: "vMPSY54TVTLaLjTFv0MskgcwQmg0BUTb6AL9pzQbiT8"
            v: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            r: "ASZwPK8DUe4wrXDJIid39tP7nIuev6UGHtQbUvKskpg"
            v: "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAE"
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    ConfirmedReceipt:
      type: object
      properties:
        ballot_id:
          type: integer
          example: 12345
        election_id:
          type: integer
        question_id:
          type: integer
        state:
          type: string
          description: Always "Confirmed".
        confirmation_code:
          type: string
        signature:
          type: string
        votes:
          description: Object map from candidate names to `VoteReceipt` values.
        pwf:
          type: object
          properties:
            a:
              type: string
            b:
              type: string
            r:
              type: string
      required:
        - ballot_id
        - election_id
        - question_id
        - state
        - confirmation_code
        - signature
        - votes
        - pwf
      example:
        ballot_id: 12345
        election_id: 4356
        question_id: 11
        state: "Confirmed"
        confirmation_code: "YNEDDW2KR3P2IWCIQK2PWL2265YODQFDXLKNBRT3A64AT2T3V2"
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
        votes:
          Alice:
            R: "AuWgT3Q78-CC7XuA_-v2d39xEISuBtda8vSPm2CHVlrP"
            Z: "A2x1FlP3TdLAaq3jf18izBvwwDPipVnBDser-htGyO9W"
            pwf:
              c1: "hoFCqyRIoDy1-e4Fr6qaQoPiyenNXcQH3fuCSmBkNoY"
              c2: "Vz9pNecJ47gmoZmrfquIX14RvjPwJgYbLKnkG2vN2D0"
              r1: "bR-mN0qoXOoGoKTBCSwjnLlKaS60SRdHJsOJeGPAdkw"
              r2: "JSt46YEvHPWuUVxjTSp-0CYu5mUZNd8BDgqcSrhVbUM"
          Bob:
            R: "AuGIf4m32UVL2S8Ezbg1fe11S7YfAfmwji-AnUEJCLNE"
            Z: "A4dGX1FJtsXaj4gessSOohUODmjOLVbQhUp5pSMLEmX4"
            pwf:
              c1: "OvBibLAIQwRlwTg4i5XorQgU3QYZZjYfn5JXs-WZumc"
              c2: "B4kk7ik3bxdwbvvE5Jl5-8P7am3Tg89NeCdDuVJuEo0"
              r1: "FY38gTG5IdnGnJ9RkOThCwrAgqSeOf4c8H8qoKii3UE"
              r2: "4BQZZ1MOvbKQPV4vpK3xIkfov5hmPGLSOKCVFqobRIE"
        pwf:
          a: "AzODeWvAXSVPgCSdSWpqjPoEtd5_ah85a0pbfvePEISs"
          b: "AqZM19nOoJlVT6azS2kBdhk2-vLK3l3Z7aeA_XJKl2vJ"
          r: "UVX6rxaKqUbiItdMkT67U5BC-z5YCFQhWXEvuFBmCu4"
    CandidateTotalsMap:
      type: object
      description: Object map from candidate names to cryptographic totals.
      example:
        Alice:
          election_id: 7
          question_id: 234
          candidate_name: Alice
          tally: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI
          r_sum: sMKVUojysFflEY47ebE-9XmrRVtmPjQcpeLm33TUIxk
        Bob:
          election_id: 34
          question_id: 44
          candidate_name: Bob
          tally: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM
          r_sum: qJk5LeSZZcwnuvXKo0nbZ0g8k0a0dVb_Qw05FkmMoXI
    BallotRecall:
      type: object
      properties:
        ballot_id:
          type: integer
          example: 12345
        question_id:
          type: integer
        signature:
          type: string
      required:
        - ballot_id
        - question_id
        - signature
      example:
        ballot_id: 12345
        question_id: 5
        signature: "z2wqVsRsmXxWybZaUaW5ooHl0hlfVGH-Hy8ARAzQfe4p__ewCTvptUWt94dwQMFhoMvMtlexxSzGkPBm0AvIUQ"
    BallotRecallList:
      type: array
      items:
        $ref: "#/components/schemas/BallotRecall"
    QuestionDump:
      type: object
      properties:
        election:
          type: object
          properties:
            g1:
              type: string
            g2:
              type: string
            public_key:
              type: string
        audited:
          type: object
          description: Object map from ballot IDs to audited ballots.
        confirmed:
          type: object
          description: Object map from ballot IDs to confirmed ballots.
        totals:
          type: object
          description: Object map from candidate names to totals.
      required:
        - election
        - audited
        - confirmed
  # Common parameters
  parameters:
    ElectionID:
      name: electionID
      in: path
      required: true
      description: The ID of the election to operate on.
      schema:
        type: integer
        example: 5
    QuestionID:
      name: questionID
      in: path
      required: true
      description: The ID of the election question to operate on.
      schema:
        type: integer
        example: 12
    BallotID:
      name: ballotID
      in: path
      required: true
      description: The ID of the ballot to operate on.
      schema:
        type: integer
        example: 12345
    PageNum:
      name: page_num
      in: query
      required: false
      description: The page index into paginated data, starting at 1.
      schema:
        type: integer
        default: 1
        example: 5
    PageSize:
      name: page_size
      in: query
      required: false
      description:
        The requested size of a single paginated batch.
        The API may impose a maximum or minimum on this parameter.
      schema:
        type: integer
        default: 50
        maximum: 1000
        example: 100
  # Common Responses
  responses:
    AuthToken:
      description: Successfully authenticated.
      headers:
        Set-Cookie:
          schema:
            $ref: "#/components/schemas/AuthToken"
    BadRequest:
      description: Request was malformed.
    NotFound:
      description:
        Requested resource was not found. This can also be produced by
        authorisation errors, e.g. a missing or invalid `auth_token`.
    InternalServerError:
      description: The server encountered an error.
